{
    "Download": "Скачать"
    "Community": "Сообщество"
    "Documentation": "Документация"
    "Updates": "Обновления"
    "Your free, open-source <br> game engine.": "Ваш бесплатный игровой движок <br> с открытым исходным кодом."
    "Divelop your 2D programs and games without writing code!": "Создавайте 2D программы и игры без написания кода!"
    "Latest news": "Последние новости"
    "A different way to make programs": "Другой способ создания программ"
    "Language": "Язык"
    "Node editor": "Редактор нодов"
    "The Node Editor makes it easy to write programs without writing text code, which has over 70 unique nodes.": "Редактор нодов позволяет легко создавать программы без написания текстового кода, имея более 70 уникальных нодов."
    "Open source": "Открытый исходный код"
    "Game Engine 3 is free and available to every user. The source code can be found in the repository on GitHub.": "Game Engine 3 бесплатен и доступен каждому пользователю. Исходный код можно найти в репозитории на GitHub."
    "Interface": "Интерфейс"
    "Game Engine 3's interface is intuitive and allows you to quickly get used to the program": "Интерфейс Game Engine 3 интуитивен и позволяет быстро освоиться с программой"
    "On our Discord server you can share your projects, communicate with other users and help with the development of the program": "На нашем Discord-сервере вы можете делиться проектами, общаться с другими пользователями и помогать в разработке программы"
    "On our server you can share your projects, communicate with other users and help with the development of the program": "На нашем сервере вы можете делиться проектами, общаться с другими пользователями и помогать в разработке программы"
    "Game Engine 3 is an open-source project. We welcome community contributions": "Game Engine 3 - проект с открытым исходным кодом. Мы приветствуем вклад сообщества"
    "Bug reports": "Сообщения об ошибках"
    "Feature suggestions": "Предложения по улучшению"
    "Code and fixes": "Код и исправления"
    "Documentation and examples": "Документации и примеры"
    "Nodes": "Ноды"
    "List of all nodes, documentation on their use": "Список всех нодов, документация по их использованию"
    "First program": "Первая программа"
    "Documentation for creating the first program": "Документация по созданию первой программы"
    "Events": "События",
    "On start game": "При запуске игры",
    "Returns path on start program": "Возвращает путь при запуске программы",
    "Input": "Вход",
    "Output": "Выход",
    "path": "путь",
    "On load scene": "При загрузке сцены",
    "Returns path on load scene": "Возвращает путь при загрузке сцены",
    "Every N frames": "Каждые N кадров",
    "Returns path every N frames": "Возвращает путь каждые N кадров",
    "N": "N",
    "Every N ticks": "Каждые N тиков",
    "Returns path every N ticks": "Возвращает путь каждые N тиков",
    "Mouse right click": "Правый клик мыши",
    "Returns path on mouse right click": "Возвращает путь при правом клике мыши",
    "Mouse left click": "Левый клик мыши",
    "Returns path on mouse left click": "Возвращает путь при левом клике мыши",
    "Keyboard click": "Нажатие клавиши",
    "Returns path on click the button": "Возвращает путь при нажатии кнопки",
    "button": "кнопка",
    "Keyboard press": "Удержание клавиши",
    "Returns path while press the button": "Возвращает путь при удержании кнопки",
    "On button press": "При нажатии кнопки",
    "Returns path and button ID on button press": "Возвращает путь и ID кнопки при нажатии",
    "object ID": "ID объекта",
    "Loops": "Циклы",
    "For N times": "N раз",
    "Inputs path, count of cycles, delay in seconds between cycles": "Принимает путь, количество циклов, задержку в секундах между циклами",
    "Returns iterator (path that is called every cycle), index of cycle, path after cycles": "Возвращает итератор (путь, вызываемый каждый цикл), индекс цикла, путь после циклов",
    "X": "X",
    "iterator": "итератор",
    "index": "индекс",
    "after": "после",
    "For objects group": "Для группы объектов",
    "Inputs path, object group": "Принимает путь, группу объектов",
    "Returns iterator (path that is called every cycle), ID of object, path after cycles": "Возвращает итератор (путь, вызываемый каждый цикл), ID объекта, путь после циклов",
    "group": "группа",
    "For list elements": "Для элементов списка",
    "Inputs path, list": "Принимает путь, список",
    "Returns iterator (path that is called every cycle), index of element, element, path after cycles": "Возвращает итератор (путь, вызываемый каждый цикл), индекс элемента, элемент, путь после циклов",
    "list": "список",
    "element": "элемент",
    "For dict elements": "Для элементов словаря",
    "Inputs path, dict": "Принимает путь, словарь",
    "Returns iterator (path that is called every cycle), key of element, element, path after cycles": "Возвращает итератор (путь, вызываемый каждый цикл), ключ элемента, элемент, путь после циклов",
    "dict": "словарь",
    "key": "ключ",
    "Text": "Текст",
    "Connect text": "Соединить текст",
    "Inputs path, first text, second text and returns sum of this texts": "Принимает путь, первый текст, второй текст и возвращает сумму этих текстов",
    "text": "текст",
    "Slice text": "Обрезать текст",
    "Inputs path, text, start index and end index": "Принимает путь, текст, начальный индекс и конечный индекс",
    "Returns text starts with start index and end with end index": "Возвращает текст, начинающийся с начального индекса и заканчивающийся конечным индексом",
    "start": "начало",
    "end": "конец",
    "Write text": "Записать текст",
    "Write text in console": "Записать текст в консоль",
    "Display text": "Отобразить текст",
    "Display text on X, Y in this frame": "Отобразить текст на X, Y в этом кадре",
    "Y": "Y",
    "Numbers": "Числа",
    "A + B": "A + B",
    "Returns A + B": "Возвращает A + B",
    "A": "A",
    "B": "B",
    "answer": "ответ",
    "A - B": "A - B",
    "Returns A - B": "Возвращает A - B",
    "A * B": "A * B",
    "Returns A * B": "Возвращает A * B",
    "A / B": "A / B",
    "Returns A / B": "Возвращает A / B",
    "Radians": "Радианы",
    "Returns radians from degrees": "Возвращает радианы из градусов",
    "degrees": "градусы",
    "radians": "радианы",
    "Degrees": "Градусы",
    "Returns degrees from radians": "Возвращает градусы из радиан",
    "Sin": "Синус",
    "Returns sin from radians": "Возвращает синус из радиан",
    "Cos": "Косинус",
    "Returns cos from radians": "Возвращает косинус из радиан",
    "Tan": "Тангенс",
    "Returns tan from radians": "Возвращает тангенс из радиан",
    "Ctg": "Котангенс",
    "Returns ctg from radians": "Возвращает котангенс из радиан",
    "Absolute of number": "Модуль числа",
    "Returns absolute from number": "Возвращает модуль числа",
    "number": "число",
    "Logic": "Логика",
    "If": "Если",
    "If condition true return true path else false path": "Если условие истинно, возвращает путь истины, иначе путь лжи",
    "condition": "условие",
    "true path": "путь истины",
    "false path": "путь лжи",
    "If collision": "Если столкновение",
    "If object collision group return true path and object id else false path": "Если объект сталкивается с группой, возвращает путь истины и ID объекта, иначе путь лжи",
    "consider only intersection as a collision": "считать столкновением только пересечение",
    "If key in dict": "Если ключ в словаре",
    "If key in dict return true path and object id else false path": "Если ключ в словаре, возвращает путь истины и ID объекта, иначе путь лжи",
    "If element in list": "Если элемент в списке",
    "If element in list return true path and object id else false path": "Если элемент в списке, возвращает путь истины и ID объекта, иначе путь лжи",
    "Objects": "Объекты",
    "Get object ID by name": "Получить ID объекта по имени",
    "Return object ID by name": "Возвращает ID объекта по имени",
    "name": "имя",
    "Set object pos": "Установить позицию объекта",
    "Set object pos for object by ID": "Установить позицию объекта по ID",
    "Move object": "Переместить объект",
    "Move object for object by ID": "Переместить объект по ID",
    "Move object for object by ID by angle with power": "Переместить объект по ID под углом с силой",
    "angle": "угол",
    "power": "сила",
    "Move object with braking": "Переместить объект с торможением",
    "Move object for object by ID by angle with power and braking power": "Переместить объект по ID под углом с силой и силой торможения",
    "braking": "торможение",
    "Get object pos": "Получить позицию объекта",
    "Returns object position": "Возвращает позицию объекта",
    "Set object var": "Установить переменную объекта",
    "Set object variable for object by ID with name and value": "Установить переменную объекта по ID с именем и значением",
    "value": "значение",
    "Get object var": "Получить переменную объекта",
    "Returns object by ID variable value by name": "Возвращает значение переменной объекта по ID и имени",
    "Create object": "Создать объект",
    "Create object by name and position and returns object ID": "Создать объект по имени и позиции и возвращает ID объекта",
    "Remove object": "Удалить объект",
    "Remove object by ID": "Удалить объект по ID",
    "Get resulting vector": "Получить результирующий вектор",
    "Returns resultings of all vectors in object by ID": "Возвращает результат всех векторов в объекте по ID",
    "Get object parameter": "Получить параметр объекта",
    "Returns object parameter by object ID and parameter name": "Возвращает параметр объекта по ID объекта и имени параметра",
    "Set object parameter": "Установить параметр объекта",
    "Set object value of object parameter by object ID and parameter name": "Установить значение параметра объекта по ID объекта и имени параметра",
    "Get all objects in group": "Получить все объекты в группе",
    "Returns list of all objects in group": "Возвращает список всех объектов в группе",
    "Jump": "Прыжок",
    "Imitate jump for object by ID with power": "Имитировать прыжок для объекта по ID с силой",
    "OBJECT MUST BY DYNAMIC!!!": "ОБЪЕКТ ДОЛЖЕН БЫТЬ ДИНАМИЧЕСКИМ!!!",
    "Animation": "Анимация",
    "Run animation": "Запустить анимацию",
    "Run animation for object by ID and animation name": "Запустить анимацию для объекта по ID и имени анимации",
    "Stop animation": "Остановить анимацию",
    "Stop animation for object by ID": "Остановить анимацию для объекта по ID",
    "Mirror animation": "Отразить анимацию",
    "Mirror animations for object by ID vertically and horizontally": "Отразить анимацию для объекта по ID вертикально и горизонтально",
    "horizontal": "горизонтально",
    "vertical": "вертикально",
    "Another": "Другое",
    "Set var": "Установить переменную",
    "Set variable value by name and globality variable": "Установить значение переменной по имени и глобальности переменной",
    "global": "глобальная",
    "Get var": "Получить переменную",
    "Returns variable value by name and globality variable": "Возвращает значение переменной по имени и глобальности переменной",
    "Random": "Случайное",
    "Returns random number from A to B": "Возвращает случайное число от A до B",
    "Decode holder": "Декодировать держатель",
    "Decode text holder to value": "Декодировать текстовый держатель в значение",
    "Holders": "Держатели",
    "%math(expression) -> return answer on this expression": "%math(выражение) -> возвращает ответ на это выражение",
    "%local_var(variable) -> return value of local variable": "%local_var(переменная) -> возвращает значение локальной переменной",
    "%global_var(variable) -> return value of global variable": "%global_var(переменная) -> возвращает значение глобальной переменной",
    "Example": "Пример",
    "let: local variable abc = 1": "пусть: локальная переменная abc = 1",
    "%math(%local_var(abc) + 2) -> 3": "%math(%local_var(abc) + 2) -> 3",
    "Len": "Длина",
    "Returns len of object, if object type is not dict or list return 1": "Возвращает длину объекта, если тип объекта не словарь или список, возвращает 1",
    "object": "объект",
    "len": "длина",
    "Exit": "Выход",
    "Close project": "Закрыть проект",
    "Python": "Python",
    "Running code in function \"run\" with args = list, kwargs = dict": "Выполнение кода в функции \"run\" с args = список, kwargs = словарь",
    "What will be returned via return in code will be returned to the list output": "То, что будет возвращено через return в коде, будет возвращено в выходной список",
    "A more detailed guide can be found in the Programming tab": "Более подробное руководство можно найти во вкладке Программирование",
    "code": "код",
    "Function": "Функция",
    "Initializate function with function name, on call return path and getted list": "Инициализировать функцию с именем функции, при вызове возвращает путь и полученный список",
    "function name": "имя функции",
    "Call function": "Вызвать функцию",
    "Call function by name with list value": "Вызвать функцию по имени со значением списка",
    "Get mouse pos": "Получить позицию мыши",
    "Returns mouse position": "Возвращает позицию мыши",
    "Passed framef time": "Прошедшее время кадра",
    "Returns passed time - count ms for update frame": "Возвращает прошедшее время - количество мс для обновления кадра",
    "passed time": "прошедшее время",
    "Go to scene": "Перейти к сцене",
    "Go to scene by name": "Перейти к сцене по имени",
    "scene": "сцена",
    "Get scene name": "Получить имя сцены",
    "Return scene name": "Возвращает имя сцены",
    "Wait": "Ждать",
    "Wait N frames": "Ждать N кадров",
    "time": "время",
    "Break": "Прервать",
    "Break from the cycle": "Выйти из цикла",
    "Set": "Множество",
    "Add list element": "Добавить элемент в список",
    "Returns list with new element": "Возвращает список с новым элементом",
    "Get by index": "Получить по индексу",
    "Returns element of list by index": "Возвращает элемент списка по индексу",
    "Delete by index": "Удалить по индексу",
    "Returns list without element by index": "Возвращает список без элемента по индексу",
    "Get index of element": "Получить индекс элемента",
    "Returns index of element in list": "Возвращает индекс элемента в списке",
    "Slice list": "Обрезать список",
    "Returns list starts with start index and end with end index": "Возвращает список, начинающийся с начального индекса и заканчивающийся конечным индексом",
    "Add dict element": "Добавить элемент в словарь",
    "Returns dict with new element by key": "Возвращает словарь с новым элементом по ключу",
    "Get by key": "Получить по ключу",
    "Returns element by key in dict": "Возвращает элемент по ключу в словаре",
    "Remove by key": "Удалить по ключу",
    "Return dict without element by key in dict": "Возвращает словарь без элемента по ключу в словаре",
    "Get key of element": "Получить ключ элемента",
    "Returns key of element in dict": "Возвращает ключ элемента в словаре",
    "Music": "Музыка",
    "Play music": "Воспроизвести музыку",
    "Play music by name with volume": "Воспроизвести музыку по имени с громкостью",
    "volume": "громкость",
    "Stop music": "Остановить музыку",
    "Play sound": "Воспроизвести звук",
    "Play sound by name with volume": "Воспроизвести звук по имени с громкостью",
    "Experimental": "Экспериментальное",
    "Get noise value": "Получить значение шума",
    "Return value of Perlin noise in X, Y": "Возвращает значение шума Перлина в X, Y",
    "seed": "зерно",
    "min": "минимум",
    "max": "максимум",
    "octaves": "октавы",
    "frequency": "частота",
    "amplitude": "амплитуда",
    "lacunarity": "лакунарность",
    "persistence": "настойчивость"

    "Documentation on the creation of the first program Hello World!": "Документация по созданию первой программы Hello World!"
}
